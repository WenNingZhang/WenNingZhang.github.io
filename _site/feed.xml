<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000//feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="http://jekyllrb.com" version="3.3.0">Jekyll</generator><link href="http://localhost:4000//feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000//" rel="alternate" type="text/html" hreflang="zh" /><updated>2018-02-02T14:18:17+08:00</updated><id>http://localhost:4000///</id><title type="html">Wenning’s blog</title><subtitle>Wenning's blog
</subtitle><author><name>Wenning Zhang</name><email>1527847114@qq.com</email></author><entry><title type="html">mongodb aggregate实现一对多、一对一的查询</title><link href="http://localhost:4000//blog/2017/12/10/mongodb-lookup.html" rel="alternate" type="text/html" title="mongodb aggregate实现一对多、一对一的查询" /><published>2017-12-10T00:12:27+08:00</published><updated>2017-12-10T00:12:27+08:00</updated><id>http://localhost:4000//blog/2017/12/10/mongodb-lookup</id><content type="html" xml:base="http://localhost:4000//blog/2017/12/10/mongodb-lookup.html">&lt;p&gt;MongoDB 3.2原来已经实现一对多、一对一的查询 :wave: :wave:&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;一对多&lt;/h2&gt;

&lt;p&gt;先创建一张表&lt;code class=&quot;highlighter-rouge&quot;&gt;countryCode&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.countryCode.insert([{code: 1}, {code: 20}, {code: 30}])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://wx4.sinaimg.cn/large/e8616f3dly1fmapix2e3zj20xe074myo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二张表&lt;code class=&quot;highlighter-rouge&quot;&gt;countryCodeLookup&lt;/code&gt;，这张表显示country的code和country的name 的对应关系是&lt;code class=&quot;highlighter-rouge&quot;&gt;一对多&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.countryCodeLookup.insert([{code: 1, name: &quot;United States&quot;}, {code: 20, name: &quot;Egypt&quot;},
{code: 1, name: &quot;Foobar&quot;}, {code: 30, name: &quot;Greece&quot;}])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/large/e8616f3dly1fmapiwmxsqj20x30aojtv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lookupproject&quot;&gt;$lookup、$project&lt;/h3&gt;

&lt;p&gt;下面通过 $lookup 操作符连接两个集合，其中 $project 会过滤属性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.countryCode.aggregate([
{ $lookup: {from: &quot;countryCodeLookup&quot;, localField: &quot;code&quot;, foreignField: &quot;code&quot;, as: &quot;countryName&quot;} },
{ $project: {&quot;code&quot;:1, &quot;countryName.name&quot;:1, &quot;_id&quot;:0} }
])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://wx1.sinaimg.cn/large/e8616f3dly1fmapiw7q16j20wr0c1tao.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;match&quot;&gt;$match&lt;/h3&gt;

&lt;p&gt;$match 会查询连接后的表，显示符合条件的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.countryCode.aggregate([
{ $lookup: {from: &quot;countryCodeLookup&quot;, localField: &quot;code&quot;, foreignField: &quot;code&quot;, as: &quot;countryName&quot;} },
{ $project: {&quot;code&quot;:1, &quot;countryName.name&quot;:1, &quot;_id&quot;:0} },
{ $match:{&quot;code&quot;:1.0}}
])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://wx3.sinaimg.cn/large/e8616f3dly1fmapivt4r1j20wa08dmyg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一对一&lt;/h2&gt;

&lt;h3 id=&quot;unwind&quot;&gt;$unwind&lt;/h3&gt;

&lt;p&gt;$unwind操作符会分解$lookup中的as数组，使之扁平化返回。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.countryCode.aggregate([
{ $lookup: {from: &quot;countryCodeLookup&quot;, localField: &quot;code&quot;, foreignField: &quot;code&quot;, as: &quot;countryName&quot;} },
{ $project: {&quot;code&quot;:1, &quot;countryName.name&quot;:1, &quot;_id&quot;:0} },
{ $unwind: &quot;$countryName&quot;},
{ $match:{&quot;code&quot;:1.0}}
])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://wx3.sinaimg.cn/large/e8616f3dly1fmapivt4r1j20wa08dmyg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在countryName是一个子文档，在project中设置把子文档中的属性拿出来，这里$project要在$unwind属性后面。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.countryCode.aggregate([
{ $lookup: {from: &quot;countryCodeLookup&quot;, localField: &quot;code&quot;, foreignField: &quot;code&quot;, as: &quot;countryName&quot;} },
{ $unwind: &quot;$countryName&quot;},
{ $project: {&quot;code&quot;:1, &quot;name&quot;: &quot;$countryName.name&quot;, &quot;_id&quot;:0} }
])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/large/e8616f3dly1fmapisx2y3j20xw0admyq.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;</content><author><name>Wenning Zhang</name><email>1527847114@qq.com</email></author><category term="blog" /><category term="MongoDB" /><summary type="html">MongoDB 3.2原来已经实现一对多、一对一的查询 :wave: :wave:</summary></entry><entry><title type="html">重写express(三)</title><link href="http://localhost:4000//blog/2017/12/09/rewrite-express-3.html" rel="alternate" type="text/html" title="重写express(三)" /><published>2017-12-09T12:21:55+08:00</published><updated>2017-12-09T12:21:55+08:00</updated><id>http://localhost:4000//blog/2017/12/09/rewrite-express-3</id><content type="html" xml:base="http://localhost:4000//blog/2017/12/09/rewrite-express-3.html">&lt;p&gt;继续实现express&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;section&quot;&gt;目标：实现一个路由&lt;/h3&gt;

&lt;p&gt;app.get(‘/test’, (req, res) =&amp;gt; res.send(‘Hello World!’) );&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;预备知识&lt;/h3&gt;

&lt;p&gt;1、Array.prototype.slice.call(arguments);&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把类数组对象转化为数组，并且返回转化后的数组。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo () {
      console.log(arguments)
      console.log(Array.prototype.slice.call(arguments))
      console.log(Array.prototype.slice.call(arguments, 1))
      console.log(arguments);
}
foo ('hello', 'world')

{ '0': 'hello', '1': 'world' }
[ 'hello', 'world' ]
[ 'world' ]
{ '0': 'hello', '1': 'world' }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、require模块时，Node对模块进行缓存，第二次require时，是不会重复开销的。&lt;/p&gt;

&lt;p&gt;3、router、route、layer 区别&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;router 相当于一个中间件容器，每个应用只会创建一个router。&lt;/li&gt;
  &lt;li&gt;每个路由中间件会对应一个layer对象，而判断路由中间件和普通中间件区别是判断layer.route是否为空。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;流程&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let express = require('./express');
let app = express();

app.get('/test', (req, res) =&amp;gt; res.send('Hello World!'));
app.listen(3001, function () {
    console.log('the server is listening:', 3001);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;路由get的添加分为三板斧&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、express()   //为应用添加各种请求方法
2、app.get('/test', (req, res) =&amp;gt; {})  // 构建前端请求和后端处理程序的关联
3、createServer(app)  // 请求方法的执行，请求到来后，调用函数app()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;具体实现&lt;/p&gt;

&lt;p&gt;1、执行express后，会在app对象中添加各种请求方法。&lt;/p&gt;

&lt;p&gt;2、构建关联&lt;/p&gt;

&lt;p&gt;app[method] 函数会在调用路由中间件（例如 app.get(/test)）时执行。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;methods.forEach(function (method) {
    app[method] = function (path) {
        this.lazyrouter();  //新建一个`router`对象
        let route = this._router.route(path); //新建一个route并添加到刚刚建立的router的stack中，
        这里实际上是调用的`router`函数
        route[method].apply(route, slice.call(arguments, 1)); //为route添加stack
        return this;
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this.lazyrouter();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个方法会创建router对象，而这个对象会一直绑定到应用的_router属性上，创建的router对象在每个应用中只有一个。
&lt;code class=&quot;highlighter-rouge&quot;&gt;express.js&lt;/code&gt;中的app对象和这里创建的router对象是结构相似的(router对象本身是个函数，并且添加一些属性)。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let route = this._router.route(path);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先创建一个Route对象，创建layer对象，把layer对象的route属性指向Route对象，把新创建的layer对象放到router的stack中，返回route对象。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let handle = slice.call(arguments, 1);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;获取处理函数(数组的形式)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;route[method].apply(route, handle);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;获取处理函数，再次实例化layer对象，并且设置layer.method = get,然后把新创建的layer放到route对象的stack中。&lt;/p&gt;

&lt;p&gt;这时路由和后端程序已经关联好了。&lt;/p&gt;

&lt;p&gt;3、根据请求路由调用具体处理函数&lt;/p&gt;

&lt;p&gt;请求来到后，实际上调用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt;中的handle函数(获取应用的_router属性，实际上是router对象)
—-&amp;gt; 调用router.handle() —-&amp;gt;
根据请求的url和第二步中注册的路由路径判断是否是满足，满足的话，调用相应layer对象中的handle对象进行调用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/WenNingZhang/rewrite_express.git&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;</content><author><name>Wenning Zhang</name><email>1527847114@qq.com</email></author><category term="blog" /><category term="Express" /><summary type="html">继续实现express</summary></entry><entry><title type="html">重写express(二)</title><link href="http://localhost:4000//blog/2017/12/09/rewrite-express-2.html" rel="alternate" type="text/html" title="重写express(二)" /><published>2017-12-09T12:21:55+08:00</published><updated>2017-12-09T12:21:55+08:00</updated><id>http://localhost:4000//blog/2017/12/09/rewrite-express-2</id><content type="html" xml:base="http://localhost:4000//blog/2017/12/09/rewrite-express-2.html">&lt;p&gt;继续实现express&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;section&quot;&gt;目标：实现一个路由&lt;/h3&gt;

&lt;p&gt;app.get(‘/test’, (req, res) =&amp;gt; res.send(‘Hello World!’) );&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;预备知识&lt;/h3&gt;

&lt;p&gt;1、Array.prototype.slice.call(arguments);&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把类数组对象转化为数组，并且返回转化后的数组。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo () {
      console.log(arguments)
      console.log(Array.prototype.slice.call(arguments))
      console.log(Array.prototype.slice.call(arguments, 1))
      console.log(arguments);
}
foo ('hello', 'world')

{ '0': 'hello', '1': 'world' }
[ 'hello', 'world' ]
[ 'world' ]
{ '0': 'hello', '1': 'world' }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2、require模块时，Node对模块进行缓存，第二次require时，是不会重复开销的。&lt;/p&gt;

&lt;p&gt;3、router、route、layer 区别&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;router 相当于一个中间件容器，每个应用只会创建一个router。&lt;/li&gt;
  &lt;li&gt;每个路由中间件会对应一个layer对象，而判断路由中间件和普通中间件区别是判断layer.route是否为空。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;流程&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let express = require('./express');
let app = express();

app.get('/test', (req, res) =&amp;gt; res.send('Hello World!'));
app.listen(3001, function () {
    console.log('the server is listening:', 3001);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;路由get的添加分为三板斧&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1、express()   //为应用添加各种请求方法
2、app.get('/test', (req, res) =&amp;gt; {})  // 构建前端请求和后端处理程序的关联
3、createServer(app)  // 请求方法的执行，请求到来后，调用函数app()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;具体实现&lt;/p&gt;

&lt;p&gt;1、执行express后，会在app对象中添加各种请求方法。&lt;/p&gt;

&lt;p&gt;2、构建关联&lt;/p&gt;

&lt;p&gt;app[method] 函数会在调用路由中间件（例如 app.get(/test)）时执行。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;methods.forEach(function (method) {
    app[method] = function (path) {
        this.lazyrouter();  //新建一个`router`对象
        let route = this._router.route(path); //新建一个route并添加到刚刚建立的router的stack中，
        这里实际上是调用的`router`函数
        route[method].apply(route, slice.call(arguments, 1)); //为route添加stack
        return this;
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this.lazyrouter();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个方法会创建router对象，而这个对象会一直绑定到应用的_router属性上，创建的router对象在每个应用中只有一个。
&lt;code class=&quot;highlighter-rouge&quot;&gt;express.js&lt;/code&gt;中的app对象和这里创建的router对象是结构相似的(router对象本身是个函数，并且添加一些属性)。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let route = this._router.route(path);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先创建一个Route对象，创建layer对象，把layer对象的route属性指向Route对象，把新创建的layer对象放到router的stack中，返回route对象。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let handle = slice.call(arguments, 1);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;获取处理函数(数组的形式)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;route[method].apply(route, handle);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;获取处理函数，再次实例化layer对象，并且设置layer.method = get,然后把新创建的layer放到route对象的stack中。&lt;/p&gt;

&lt;p&gt;这时路由和后端程序已经关联好了。&lt;/p&gt;

&lt;p&gt;3、根据请求路由调用具体处理函数&lt;/p&gt;

&lt;p&gt;请求来到后，实际上调用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt;中的handle函数(获取应用的_router属性，实际上是router对象)
—-&amp;gt; 调用router.handle() —-&amp;gt;
根据请求的url和第二步中注册的路由路径判断是否是满足，满足的话，调用相应layer对象中的handle对象进行调用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/WenNingZhang/rewrite_express.git&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;</content><author><name>Wenning Zhang</name><email>1527847114@qq.com</email></author><category term="blog" /><category term="Express" /><summary type="html">继续实现express</summary></entry><entry><title type="html">重写express(一)</title><link href="http://localhost:4000//blog/2017/12/09/rewrite-express-1.html" rel="alternate" type="text/html" title="重写express(一)" /><published>2017-12-09T12:21:55+08:00</published><updated>2017-12-09T12:21:55+08:00</updated><id>http://localhost:4000//blog/2017/12/09/rewrite-express-1</id><content type="html" xml:base="http://localhost:4000//blog/2017/12/09/rewrite-express-1.html">&lt;p&gt;一直以为学好一个东西最好的方法，就是实现它，接下来就会一步步实现express。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;预备知识&lt;/h2&gt;

&lt;p&gt;1、Object.assign(target，….source)&lt;/p&gt;

&lt;p&gt;通过调用该函数可以copy所有可被枚举(enumerable:true)的自有属性(不包括  __&lt;em&gt;proty&lt;/em&gt;__)到目标对象中。&lt;/p&gt;

&lt;p&gt;2、 Function.apply(obj，args)&lt;/p&gt;

&lt;p&gt;obj：这个对象将代替Function类里this对象&lt;/p&gt;

&lt;p&gt;args：这个是数组，它将作为参数传给Function。&lt;/p&gt;

&lt;p&gt;使用apply可以改变程序执行的上下文，控制传参的个数，灵活性更好。&lt;/p&gt;

&lt;p&gt;3、函数添加属性和方法&lt;/p&gt;

&lt;p&gt;js 中函数其实是引用类型，可以随意添加属性和方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = function() {}
app.a = '11';
app.b = '22';
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面例子app可以作为一个函数直接执行app()，同时也可以用app.a这样得到它的属性。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;流程&lt;/h2&gt;

&lt;p&gt;先要创建一个简单的express应用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let express = require('./express');
let app = express();

app.listen(3000, function () {
    console.log('the server is listening:' ,3000);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;requireexpress&quot;&gt;require(‘./express’)&lt;/h3&gt;

&lt;p&gt;当require(’./express’)，实际上是require’./lib/express’，这是express的入口，查看express.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exports = module.exports = createApplication;

let application = require('./application');

function createApplication() {
    let app = function (req, res, next) {
        res.writeHead('200', {'Content-Type': 'text-plain'});
        res.end('hello world\n');
    }
    Object.assign(app, application);
    return app;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;所以require(‘./express’)得到的是&lt;code class=&quot;highlighter-rouge&quot;&gt;createApplication&lt;/code&gt;函数。&lt;/p&gt;

&lt;h3 id=&quot;express&quot;&gt;express()&lt;/h3&gt;

&lt;p&gt;而 let app = express()就是得到app对象，这个对象中也包含application的属性（listen）。&lt;/p&gt;

&lt;h3 id=&quot;applisten&quot;&gt;app.listen()&lt;/h3&gt;

&lt;p&gt;app.listen实际调用的是application.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.listen = function listen() {
    var server = http.createServer(this);
    return server.listen.apply(server, arguments);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里的this 是express应用中的app，this在这里是作为函数执行，这个函数会添加到服务器的request事件，这样的话，当每个请求到来后，app函数就是处理函数。&lt;/p&gt;

&lt;p&gt;return server.listen.apply(server, arguments);  以server 作为上下文，调用listen方法启动服务器。&lt;/p&gt;</content><author><name>Wenning Zhang</name><email>1527847114@qq.com</email></author><category term="blog" /><category term="Express" /><summary type="html">一直以为学好一个东西最好的方法，就是实现它，接下来就会一步步实现express。</summary></entry><entry><title type="html">Nginx rewrite用法</title><link href="http://localhost:4000//blog/2017/12/03/nginx-rewrite.html" rel="alternate" type="text/html" title="Nginx rewrite用法" /><published>2017-12-03T16:26:21+08:00</published><updated>2017-12-03T16:26:21+08:00</updated><id>http://localhost:4000//blog/2017/12/03/nginx-rewrite</id><content type="html" xml:base="http://localhost:4000//blog/2017/12/03/nginx-rewrite.html">&lt;p&gt;实现URL的重写以及匹配的URL重定向。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;section&quot;&gt;基本知识&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;作用&lt;/p&gt;

    &lt;p&gt;实现URL的重写以及匹配的URL重定向。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置语法&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Syntax: rewrite regex replacement [flag];
Default: --
Context: server, location, if
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;正则表达式&lt;/p&gt;

    &lt;p&gt;小括号（） 用于匹配括号之间的内容，通过 $1、$2 调用&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ($http_user_agent ~ MSIE) {
     rewrite ^(.*)$  /msie/$1 break;
}
//代理是MSIN的，如果是/test.html ,会跳转到/msin/test.html 页面中
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;flag 标记位&lt;/p&gt;

    &lt;p&gt;标记rewrite的类型&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;类型&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;last&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;停止rewrite检测&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;break&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;停止rewrite检测&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;redirect&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;返回302临时重定向，地址栏会显示跳转后的地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pemanent&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;返回301永久重定向，地址栏会显跳转后的地&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;比较flag标记位的last、break&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
        listen  8000 ;
        server_name localhost;
        root /root/opt/app/code;
        location ~^/break {
                rewrite ^/break /static/  break;
        }
        location ~^/last {
                rewrite ^/last /test/ last;
        }
        location /test/ {
                default_type application/json;
                return 200 '{&quot;status&quot;:&quot;success&quot;, &quot;remote_addr&quot;: $remote_addr}';
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;~ 表示区分大小写的正则匹配。&lt;/p&gt;

&lt;p&gt;访问 `/break` 会匹配第一个location，标志位是 break ，这时nginx会找root目录下的/static/目录的index.html文件，如果没有，返回404，找到显示。&lt;/p&gt;

&lt;p&gt;而访问`/last`会匹配第二个location，标志位是 last ，这时nginx会_重新匹配一个请求URL为/test/的_，匹配第三个location，返回结果。&lt;/p&gt;

&lt;p&gt;比较flag标记位的redirect、last。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
        listen  8000 ;
        server_name localhost;
        root /root/opt/app/code;
        location ~^/last {
                rewrite ^/last /test/ last;
      #          rewrite ^/last /test/ redirect;
        }
        location /test/ {
                default_type application/json;
                return 200 '{&quot;status&quot;:&quot;success&quot;, &quot;remote_addr&quot;: $remote_addr}';
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;last在日志中就一条日志，客户端就发送一次请求。&lt;/p&gt;

&lt;p&gt;redirect是有两条日志，其中第一条是状态302，并且请求头中有location，为重定向的地址。第二条返回200。nignx一看是redirect，就重新发送一次请求，从而匹配第三个。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;last日志:
*   Trying 106.15.231.221...
* Connected to 106.15.231.221 (106.15.231.221) port 8000 (#0)
&amp;gt; GET /last HTTP/1.1
&amp;gt; Host: 106.15.231.221:8000
&amp;gt; User-Agent: curl/7.43.0
&amp;gt; Accept: */*
&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt; HTTP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Server:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Ubuntu&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Date:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Wed&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;07:49:04&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GMT&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content-Type:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content-Length:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;165&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Last-Modified:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Wed&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;02:09:17&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GMT&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Connection:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;keep-alive&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Vary:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Accept-Encoding&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ETag:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;5a0ba1cd-a5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Accept-Ranges:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bytes&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test proxy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;background-color:red;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;this is test proxy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

redirect日志:
*   Trying 106.15.231.221...
* Connected to 106.15.231.221 (106.15.231.221) port 8000 (#0)
&amp;gt; GET /last HTTP/1.1
&amp;gt; Host: 106.15.231.221:8000
&amp;gt; User-Agent: curl/7.43.0
&amp;gt; Accept: */*
&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt; HTTP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;302&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Moved&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Temporarily&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Server:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Ubuntu&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Date:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Wed&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;07:51:14&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GMT&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content-Type:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content-Length:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;170&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Location:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;221:8000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Connection:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;keep-alive&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Ignoring&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;response-body&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;221&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;intact&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Issue&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;URL:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;221:8000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/'&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Found&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;221:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;0x7fc91b607150&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Re-using&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;existing&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(#&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;221&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Connected&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;221&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;221&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;8000&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(#&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; GET /test/ HTTP/1.1
&amp;gt; Host: 106.15.231.221:8000
&amp;gt; User-Agent: curl/7.43.0
&amp;gt; Accept: */*
&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt; HTTP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Server:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Ubuntu&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Date:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Wed&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;07:51:14&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GMT&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content-Type:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content-Length:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;51&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Connection:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;keep-alive&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;106&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;221&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;intact&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;{&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remote_addr&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而redirect 和permanent 也可以重定向到其他的网页。完成重定向&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;rewrite 规则在不同模块下的优先级是不同的。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;执行server 块中rewrite指令&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;执行location 匹配&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;执行location 的rewrite 指令&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;实践&lt;/h2&gt;
&lt;p&gt;接下来看一个redirect的应用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
        listen  8000 ;
        server_name localhost;
        root /root/opt/app/code;
        location / {
#                rewrite ^/course-(\d+)-(\d+)-(\d+)\.html$ /course/$1/$2/course_$3.html break;
#                rewrite  ^/nginx https://www.baidu.com redirect;
                 if (!-f $request_filename) {
                             rewrite ^/(.*)$ http://www.baidu.com/$1 redirect;
                  }
        }
        location ~ ^/http_user_agent {
                echo 'test';
                return 200 '{&quot;http_user_agent&quot;: &quot;$http_user_agent&quot;, &quot;request_filename&quot;: &quot;$request_filename&quot;, &quot;-f $request_filename&quot;: &quot;-f $request_filename&quot;}';
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;~ ^/http_user_agent 其中 ~ 表示区分大小写的正则匹配，如果这个匹配不成，走通用匹配 /&lt;/p&gt;

&lt;p&gt;先看第一个rewrite，若请求路径为`/course-2-2-2.html`， 因为rewrite 的标志位是break，说明请求静态文件，而请求的静态文件位置为  root/opt/app/code/course/2/2/course_2.html；&lt;/p&gt;

&lt;p&gt;第二个rewrite 是表示 开头以nginx开头，这时会重定向到&lt;a href=&quot;https://www.baidu.com。&quot;&gt;https://www.baidu.com。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;第三个rewrite，当请求的文件在/root/opt/app/code 中不存在时，这里的 -f 就是判断 请求文件在此目录下是否存在，不存在时重定向到百度页面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://seanlook.com/2015/05/17/nginx-location-rewrite/&quot; target=&quot;_blank&quot;&gt;nginx配置location总结及rewrite规则写法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://yuerblog.cc/2017/06/12/nginx-rewrite-problem/&quot; target=&quot;_blank&quot;&gt;nginx配置location总结及rewrite规则写法&lt;/a&gt;&lt;/p&gt;</content><author><name>Wenning Zhang</name><email>1527847114@qq.com</email></author><category term="blog" /><category term="Nginx" /><summary type="html">实现URL的重写以及匹配的URL重定向。</summary></entry><entry><title type="html">picture_library</title><link href="http://localhost:4000//2017/12/03/pictures.html" rel="alternate" type="text/html" title="picture_library" /><published>2017-12-03T00:00:00+08:00</published><updated>2017-12-03T00:00:00+08:00</updated><id>http://localhost:4000//2017/12/03/pictures</id><content type="html" xml:base="http://localhost:4000//2017/12/03/pictures.html">&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;http://wx3.sinaimg.cn/large/e8616f3dgy1fm6z3lz4h1j21kw0zkn3h.jpg&quot; alt=&quot;example image&quot; title=&quot;An exemplary image&quot; /&gt;&lt;/p&gt;

&lt;center&gt;:facepunch: :facepunch: :facepunch: :facepunch:最喜欢的一张图，如此的安静空灵的气氛下居然蕴育着无限的希望和力量 :facepunch: :facepunch: :facepunch: :facepunch:&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/large/e8616f3dgy1fm6z91bswjj21ao0t6qb8.jpg&quot; alt=&quot;example image&quot; title=&quot;An exemplary image&quot; /&gt;&lt;/p&gt;

&lt;center&gt;:snowman: :snowman: :snowman: :snowman:
凛冬将至:snowman: :snowman: :snowman: :snowman:&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Wenning Zhang</name><email>1527847114@qq.com</email></author><category term="picture_library" /><summary type="html"></summary></entry></feed>
